name: Codecov PR Status Checks

# https://docs.github.com/en/webhooks/webhook-events-and-payloads#check_run
# This workflow is triggered for each 3rd party check run completion.
# in this workflow, we post a comment to the PR with useful guidance on how to navigate the failed check
on:
  check_run:
    types: [completed]

jobs:
  check_codecov:
    if: contains(github.event.check_run.name, 'codecov') && github.event.check_run.conclusion != 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Print event details
        run: |
          echo "Check Name: ${{ github.event.check_run.name }}"
          echo "Status: ${{ github.event.check_run.conclusion }}"
          echo "PR Number: ${{ github.event.check_run.check_suite.pull_requests[0].number }}"

      - name: Check if comment exists and add if missing
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          COMMENT_BODY="
          Codecov status check has failed.

          <details>
            <summary>If you have not yet logged in to codecov</summary>
            Please do so via [here](test).
          </details>

          <details>
            <summary>If codecov project/patch status checks are failing, here are some tips to resolve those errors!</summary>
            Please ensure your changes are tested :smile.

            There are some known limitations with codecov documented
            [here](test).

            If you believe this is a false positive and none of the suggestions above help, please add the label "codecov-bypass" to the PR.

            For any additional features/concerns, please reach out to #tools-help on slack!
          </details>
          "
          PR_NUMBER=${{ github.event.check_run.check_suite.pull_requests[0].number }}
          REPO=${{ github.repository }}

          # Fetch existing comments
          COMMENTS=$(gh pr view $PR_NUMBER --repo $REPO --json comments --jq '.comments[].body')

          # Check if the comment already exists
          if echo "$COMMENTS" | grep -qF "$COMMENT_BODY"; then
            echo "Comment already exists, skipping."
          else
            echo "Adding comment to PR..."
            gh pr comment $PR_NUMBER --repo $REPO --body "$COMMENT_BODY"
          fi
 #  || contains(github.event.check_run.name, 'test')
  codecov_status_checks:
    if: contains(github.event.check_run.name, 'codecov')
    runs-on: ubuntu-latest
    steps:
      - name: Set Shared Variables
        id: pr_info
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "commit_sha=${{ github.event.check_run.check_suite.pull_requests[0].head.sha }}" >> $GITHUB_ENV
          echo "pr_number=${{ github.event.check_run.check_suite.pull_requests[0].number }}" >> $GITHUB_ENV
          echo "check_run_name=${{ github.event.check_run.name }}" >> $GITHUB_ENV
          echo "conclusion=${{ github.event.check_run.conclusion }}" >> $GITHUB_ENV

          LABELS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.check_run.check_suite.pull_requests[0].number }}/labels --jq '.[].name')
          if echo "$LABELS" | grep -q "codecov-bypass"; then
            echo "Label 'codecov-bypass' found, setting status to success."
            echo "codecov_bypass=true" >> $GITHUB_ENV
          else
            echo "codecov_bypass=false" >> $GITHUB_ENV
          fi


      # - name: Set Codecov Status Checks to Pending
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   if: ${{ steps.pr_info.outputs.codecov_bypass }} != 'true'
      #   run: |
      #     status_check_names="codecov/unit/patch codecov/unit/project"
      #     for status_check_name in $status_check_names; do
      #       gh api repos/${{ github.repository }}/statuses/${{ steps.pr_info.commit_sha}} \
      #       -H "Authorization: token $GITHUB_TOKEN" \
      #       -H "Accept: application/vnd.github.v3+json" \
      #       -X POST \
      #       -f state="pending" \
      #       -f context="$status_check_name" \
      #       -f description="$status_check_name" \
      #       -f target_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      #     done
      #   CONCLUSION=${{ github.event.check_run.conclusion }}

      # we set our own status check as codecov may suffer from api outages which should not block CI
      - name: Set Codecov Status Check based on codecov status check
        if: ${{ env.codecov_bypass != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          status="pending"
          if [ "$codecov_bypass" == "success" ]; then
            status="success"
          else
            status="failure"
          fi

          gh api repos/${{ github.repository }}/statuses/${{ env.commit_sha }} \
            -f state="${{ env.status }}" \
            -f context="${{ status_check_name }}" \
            -f description="${{ status }}" \
            -f target_url="https://github.com/${{ github.repository }}/pull/${{ env.pr_number }}"

      - name: Bypass Codecov Status Check
        env:
          GH_TOKEN: ${{ github.token }}
        if: ${{ env.codecov_bypass }} == 'true'
        run: |
          gh api repos/${{ github.repository }}/statuses/${{ env.commit_sha }} \
            -f state="success" \
            -f context="${{ status_check_name }}" \
            -f description="bypassed "${{ status }}" \
            -f target_url="https://github.com/${{ github.repository }}/pull/${{ env.pr_number }}"


      - name: Print full event payload (formatted)
        if: always()
        run: jq . "$GITHUB_EVENT_PATH"